<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '19df12bd2ea60cf730a4f42137e4f549',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => 'f33801ed5a9b775d0caa36c335b103ea',
  'native_key' => 9,
  'object' => '{"id":9,"source":1,"property_preprocess":0,"name":"changeTemplate","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n* =========================\\n* ChangeTemplate\\n* =========================\\n*\\n* Plugin for MODX Revolution\\n* Set which template is inherited by children \\n* documents of a certain parent document\\n*\\n* Author:\\n* Marc Loehe (boundaryfunctions)\\n* marcloehe.de\\n*\\n* Modified by:\\n* Lorenzo Stanco <lorenzo.stanco@gmail.com>\\n* Lorenzostanco.com\\n*\\n* Usage:\\n*\\n* 1. Paste this as new plugin and connect it to system event\\n* \'OnDocFormRender\'.\\n*\\n* 2. Assign a new TV \'changeTemplate\' to each template\\n* for which you want to define the default children template.\\n*\\n* 3. Set the newly created TV to input type \\"Text\\" \\n*\\n* 4. Open a document and in the \'changeTemplate\' TV type a \\n* comma separated list of template IDs.\\n*\\n* 5. Have fun!\\n*\\n*\\/\\n \\n\\/\\/ Check Event\\nif ($modx->event->name == OnDocFormRender && $mode == modSystemEvent::MODE_NEW) {\\n   \\n  \\/\\/ Get current document ID\\n  if ($id = $_REQUEST[\'id\']) {\\n \\n    \\/\\/ Document Chain\\n    $resources = array($id);\\n \\n    \\/\\/ Get parent ID\\n    foreach ($modx->getParentIds($id, 10, array(\'context\' => $_REQUEST[\'context_key\'])) as $parentId) {\\n      if ($parentId) array_push($resources, $parentId);\\n    }\\n     \\n    \\/\\/ Search changeTemplate in the chain\\n    $level = 0;\\n    $childTemplates = array();\\n    foreach ($resources as $resourceId) {\\n      $resource = $modx->getObject(\'modResource\', $resourceId);\\n      if ($childTemplatesTV = $resource->getTVValue(\'changeTemplate\')) {\\n         \\n        \\/\\/ Create template array for each tree level\\n        $childTemplates = @explode(\',\', $childTemplatesTV);\\n        if (empty($childTemplates)) break;\\n        foreach ($childTemplates as $k => $v) $childTemplates[$k] = intval(trim($v));\\n         \\n        break;\\n \\n      }\\n \\n      $level++;\\n \\n    }\\n \\n    \\/\\/ Set template based on tree level\\n    if (!empty($childTemplates)) {\\n      $useTemplate = $childTemplates[$level];\\n      if (!empty($useTemplate)) {\\n        \\n        \\/\\/ Set default template\\n        if (isset($modx->controller)) {\\n          $modx->controller->setProperty(\'template\', $useTemplate);\\n        } else { \\/\\/ modX < 2.2.0\\n          $_REQUEST[\'template\'] = $useTemplate;\\n        }\\n \\n      }\\n    }\\n \\n  }\\n \\n}","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n* =========================\\n* ChangeTemplate\\n* =========================\\n*\\n* Plugin for MODX Revolution\\n* Set which template is inherited by children \\n* documents of a certain parent document\\n*\\n* Author:\\n* Marc Loehe (boundaryfunctions)\\n* marcloehe.de\\n*\\n* Modified by:\\n* Lorenzo Stanco <lorenzo.stanco@gmail.com>\\n* Lorenzostanco.com\\n*\\n* Usage:\\n*\\n* 1. Paste this as new plugin and connect it to system event\\n* \'OnDocFormRender\'.\\n*\\n* 2. Assign a new TV \'changeTemplate\' to each template\\n* for which you want to define the default children template.\\n*\\n* 3. Set the newly created TV to input type \\"Text\\" \\n*\\n* 4. Open a document and in the \'changeTemplate\' TV type a \\n* comma separated list of template IDs.\\n*\\n* 5. Have fun!\\n*\\n*\\/\\n \\n\\/\\/ Check Event\\nif ($modx->event->name == OnDocFormRender && $mode == modSystemEvent::MODE_NEW) {\\n   \\n  \\/\\/ Get current document ID\\n  if ($id = $_REQUEST[\'id\']) {\\n \\n    \\/\\/ Document Chain\\n    $resources = array($id);\\n \\n    \\/\\/ Get parent ID\\n    foreach ($modx->getParentIds($id, 10, array(\'context\' => $_REQUEST[\'context_key\'])) as $parentId) {\\n      if ($parentId) array_push($resources, $parentId);\\n    }\\n     \\n    \\/\\/ Search changeTemplate in the chain\\n    $level = 0;\\n    $childTemplates = array();\\n    foreach ($resources as $resourceId) {\\n      $resource = $modx->getObject(\'modResource\', $resourceId);\\n      if ($childTemplatesTV = $resource->getTVValue(\'changeTemplate\')) {\\n         \\n        \\/\\/ Create template array for each tree level\\n        $childTemplates = @explode(\',\', $childTemplatesTV);\\n        if (empty($childTemplates)) break;\\n        foreach ($childTemplates as $k => $v) $childTemplates[$k] = intval(trim($v));\\n         \\n        break;\\n \\n      }\\n \\n      $level++;\\n \\n    }\\n \\n    \\/\\/ Set template based on tree level\\n    if (!empty($childTemplates)) {\\n      $useTemplate = $childTemplates[$level];\\n      if (!empty($useTemplate)) {\\n        \\n        \\/\\/ Set default template\\n        if (isset($modx->controller)) {\\n          $modx->controller->setProperty(\'template\', $useTemplate);\\n        } else { \\/\\/ modX < 2.2.0\\n          $_REQUEST[\'template\'] = $useTemplate;\\n        }\\n \\n      }\\n    }\\n \\n  }\\n \\n}"}',
);