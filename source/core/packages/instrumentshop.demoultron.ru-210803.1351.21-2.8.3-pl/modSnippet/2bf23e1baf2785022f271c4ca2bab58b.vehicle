<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '2b9d4ff6b893eac476b5af8644caae45',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '2bf23e1baf2785022f271c4ca2bab58b',
  'native_key' => 13,
  'object' => '{"id":13,"source":0,"property_preprocess":0,"name":"migx","description":"","editor_type":0,"category":3,"cache_type":0,"snippet":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
);