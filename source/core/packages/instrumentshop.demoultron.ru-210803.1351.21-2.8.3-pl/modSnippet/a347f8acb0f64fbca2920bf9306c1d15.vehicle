<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '0ed2effed3e3091733753c277054444e',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'a347f8acb0f64fbca2920bf9306c1d15',
  'native_key' => 80,
  'object' => '{"id":80,"source":1,"property_preprocess":0,"name":"msProductOptions","description":"","editor_type":0,"category":22,"cache_type":0,"snippet":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msProductOptions\');\\nif (!empty($input) && empty($product)) {\\n    $product = $input;\\n}\\n\\n$product = !empty($product) && $product != $modx->resource->id\\n    ? $modx->getObject(\'msProduct\', array(\'id\' => $product))\\n    : $modx->resource;\\nif (!($product instanceof msProduct)) {\\n    return \\"[msProductOptions] The resource with id = {$product->id} is not instance of msProduct.\\";\\n}\\n\\n$ignoreGroups = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'ignoreGroups\', $scriptProperties, \'\'))), array(\'\'));\\n$ignoreOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'ignoreOptions\', $scriptProperties, \'\'))), array(\'\'));\\n$sortGroups = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'sortGroups\', $scriptProperties, \'\'))), array(\'\'));\\n$sortOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'sortOptions\', $scriptProperties, \'\'))), array(\'\'));\\n$onlyOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'onlyOptions\', $scriptProperties, \'\'))), array(\'\'));\\nif (empty($sortOptions) && !empty($onlyOptions)) {\\n    $sortOptions = $onlyOptions;\\n}\\n$groups = !empty($groups)\\n    ? array_map(\'trim\', explode(\',\', $groups))\\n    : array();\\n\\/** @var msProductData $data *\\/\\nif ($data = $product->getOne(\'Data\')) {\\n    $optionKeys = $data->getOptionKeys();\\n}\\nif (empty($optionKeys)) {\\n    return \'\';\\n}\\n$productData = $product->loadOptions();\\n\\n$options = array();\\nforeach ($optionKeys as $key) {\\n    \\/\\/ Filter by key\\n    if (!empty($onlyOptions) && $onlyOptions[0] != \'\' && !in_array($key, $onlyOptions)) {\\n        continue;\\n    } elseif (in_array($key, $ignoreOptions)) {\\n        continue;\\n    }\\n    $option = array();\\n    foreach ($productData as $dataKey => $dataValue) {\\n        $dataKey = explode(\'.\', $dataKey);\\n        if ($dataKey[0] == $key && (count($dataKey) > 1)) {\\n            $option[$dataKey[1]] = $dataValue;\\n        }\\n    }\\n\\n    $skip = (!empty($ignoreGroups) && (in_array($option[\'category\'], $ignoreGroups) || in_array($option[\'category_name\'], $ignoreGroups)))\\n        || (!empty($groups) && !in_array($option[\'category\'], $groups) && !in_array($option[\'category_name\'], $groups));\\n\\n    if (!$skip) {\\n        $option[\'value\'] = $product->get($key);\\n        if (!empty($option[\'value\'])) {\\n            $options[$key] = $option;\\n        }\\n    }\\n}\\n\\nif (!empty($sortGroups) && !empty($options)) {\\n    $sortGroups = array_map(\'mb_strtolower\', $sortGroups);\\n    uasort($options, function($a, $b) use ($sortGroups) {\\n        $ai = array_search(mb_strtolower($a[\'category\'], \'utf-8\'), $sortGroups, true);\\n        $ai = $ai !== false ? $ai : array_search(mb_strtolower($a[\'category_name\'], \'utf-8\'), $sortGroups, true);\\n        $bi = array_search(mb_strtolower($b[\'category\'], \'utf-8\'), $sortGroups, true);\\n        $bi = $bi !== false ? $bi : array_search(mb_strtolower($b[\'category_name\'], \'utf-8\'), $sortGroups, true);\\n        if ($ai === false && $bi === false) {\\n            return 0;\\n        } elseif ($ai === false) {\\n            return 1;\\n        } elseif ($bi === false) {\\n            return -1;\\n        } elseif ($ai < $bi) {\\n            return -1;\\n        } elseif ($ai > $bi) {\\n            return 1;\\n        }\\n        return 0;\\n    });\\n}\\n\\nif (!empty($sortOptions) && !empty($options)) {\\n    $sortOptions = array_map(\'mb_strtolower\', $sortOptions);\\n    uksort($options, function($a, $b) use ($sortOptions) {\\n        $ai = array_search(mb_strtolower($a, \'utf-8\'), $sortOptions, true);\\n        $bi = array_search(mb_strtolower($b, \'utf-8\'), $sortOptions, true);\\n        if ($ai === false && $bi === false) {\\n            return 0;\\n        } elseif ($ai === false) {\\n            return 1;\\n        } elseif ($bi === false) {\\n            return -1;\\n        } elseif ($ai < $bi) {\\n            return -1;\\n        } elseif ($ai > $bi) {\\n            return 1;\\n        }\\n        return 0;\\n    });\\n}\\n\\n$options = $miniShop2->sortOptionValues($options, $scriptProperties[\'sortOptionValues\']);\\n\\nif (in_array($scriptProperties[\'return\'], array(\'data\', \'array\'), true)) {\\n    return $options;\\n}\\n\\n\\/** @var pdoTools $pdoTools *\\/\\n$pdoTools = $modx->getService(\'pdoTools\');\\n\\nreturn $pdoTools->getChunk($tpl, array(\\n    \'options\' => $options,\\n));","locked":0,"properties":"a:9:{s:7:\\"product\\";a:7:{s:4:\\"name\\";s:7:\\"product\\";s:4:\\"desc\\";s:16:\\"ms2_prop_product\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:12:\\"ms2_prop_tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:20:\\"tpl.msProductOptions\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"ignoreGroups\\";a:7:{s:4:\\"name\\";s:12:\\"ignoreGroups\\";s:4:\\"desc\\";s:21:\\"ms2_prop_ignoreGroups\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"ignoreOptions\\";a:7:{s:4:\\"name\\";s:13:\\"ignoreOptions\\";s:4:\\"desc\\";s:22:\\"ms2_prop_ignoreOptions\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"onlyOptions\\";a:7:{s:4:\\"name\\";s:11:\\"onlyOptions\\";s:4:\\"desc\\";s:20:\\"ms2_prop_onlyOptions\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"sortGroups\\";a:7:{s:4:\\"name\\";s:10:\\"sortGroups\\";s:4:\\"desc\\";s:19:\\"ms2_prop_sortGroups\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"sortOptions\\";a:7:{s:4:\\"name\\";s:11:\\"sortOptions\\";s:4:\\"desc\\";s:20:\\"ms2_prop_sortOptions\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"sortOptionValues\\";a:7:{s:4:\\"name\\";s:16:\\"sortOptionValues\\";s:4:\\"desc\\";s:25:\\"ms2_prop_sortOptionValues\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"groups\\";a:7:{s:4:\\"name\\";s:6:\\"groups\\";s:4:\\"desc\\";s:15:\\"ms2_prop_groups\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minishop2\\/elements\\/snippets\\/snippet.ms_product_options.php","content":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msProductOptions\');\\nif (!empty($input) && empty($product)) {\\n    $product = $input;\\n}\\n\\n$product = !empty($product) && $product != $modx->resource->id\\n    ? $modx->getObject(\'msProduct\', array(\'id\' => $product))\\n    : $modx->resource;\\nif (!($product instanceof msProduct)) {\\n    return \\"[msProductOptions] The resource with id = {$product->id} is not instance of msProduct.\\";\\n}\\n\\n$ignoreGroups = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'ignoreGroups\', $scriptProperties, \'\'))), array(\'\'));\\n$ignoreOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'ignoreOptions\', $scriptProperties, \'\'))), array(\'\'));\\n$sortGroups = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'sortGroups\', $scriptProperties, \'\'))), array(\'\'));\\n$sortOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'sortOptions\', $scriptProperties, \'\'))), array(\'\'));\\n$onlyOptions = array_diff(array_map(\'trim\', explode(\',\', $modx->getOption(\'onlyOptions\', $scriptProperties, \'\'))), array(\'\'));\\nif (empty($sortOptions) && !empty($onlyOptions)) {\\n    $sortOptions = $onlyOptions;\\n}\\n$groups = !empty($groups)\\n    ? array_map(\'trim\', explode(\',\', $groups))\\n    : array();\\n\\/** @var msProductData $data *\\/\\nif ($data = $product->getOne(\'Data\')) {\\n    $optionKeys = $data->getOptionKeys();\\n}\\nif (empty($optionKeys)) {\\n    return \'\';\\n}\\n$productData = $product->loadOptions();\\n\\n$options = array();\\nforeach ($optionKeys as $key) {\\n    \\/\\/ Filter by key\\n    if (!empty($onlyOptions) && $onlyOptions[0] != \'\' && !in_array($key, $onlyOptions)) {\\n        continue;\\n    } elseif (in_array($key, $ignoreOptions)) {\\n        continue;\\n    }\\n    $option = array();\\n    foreach ($productData as $dataKey => $dataValue) {\\n        $dataKey = explode(\'.\', $dataKey);\\n        if ($dataKey[0] == $key && (count($dataKey) > 1)) {\\n            $option[$dataKey[1]] = $dataValue;\\n        }\\n    }\\n\\n    $skip = (!empty($ignoreGroups) && (in_array($option[\'category\'], $ignoreGroups) || in_array($option[\'category_name\'], $ignoreGroups)))\\n        || (!empty($groups) && !in_array($option[\'category\'], $groups) && !in_array($option[\'category_name\'], $groups));\\n\\n    if (!$skip) {\\n        $option[\'value\'] = $product->get($key);\\n        if (!empty($option[\'value\'])) {\\n            $options[$key] = $option;\\n        }\\n    }\\n}\\n\\nif (!empty($sortGroups) && !empty($options)) {\\n    $sortGroups = array_map(\'mb_strtolower\', $sortGroups);\\n    uasort($options, function($a, $b) use ($sortGroups) {\\n        $ai = array_search(mb_strtolower($a[\'category\'], \'utf-8\'), $sortGroups, true);\\n        $ai = $ai !== false ? $ai : array_search(mb_strtolower($a[\'category_name\'], \'utf-8\'), $sortGroups, true);\\n        $bi = array_search(mb_strtolower($b[\'category\'], \'utf-8\'), $sortGroups, true);\\n        $bi = $bi !== false ? $bi : array_search(mb_strtolower($b[\'category_name\'], \'utf-8\'), $sortGroups, true);\\n        if ($ai === false && $bi === false) {\\n            return 0;\\n        } elseif ($ai === false) {\\n            return 1;\\n        } elseif ($bi === false) {\\n            return -1;\\n        } elseif ($ai < $bi) {\\n            return -1;\\n        } elseif ($ai > $bi) {\\n            return 1;\\n        }\\n        return 0;\\n    });\\n}\\n\\nif (!empty($sortOptions) && !empty($options)) {\\n    $sortOptions = array_map(\'mb_strtolower\', $sortOptions);\\n    uksort($options, function($a, $b) use ($sortOptions) {\\n        $ai = array_search(mb_strtolower($a, \'utf-8\'), $sortOptions, true);\\n        $bi = array_search(mb_strtolower($b, \'utf-8\'), $sortOptions, true);\\n        if ($ai === false && $bi === false) {\\n            return 0;\\n        } elseif ($ai === false) {\\n            return 1;\\n        } elseif ($bi === false) {\\n            return -1;\\n        } elseif ($ai < $bi) {\\n            return -1;\\n        } elseif ($ai > $bi) {\\n            return 1;\\n        }\\n        return 0;\\n    });\\n}\\n\\n$options = $miniShop2->sortOptionValues($options, $scriptProperties[\'sortOptionValues\']);\\n\\nif (in_array($scriptProperties[\'return\'], array(\'data\', \'array\'), true)) {\\n    return $options;\\n}\\n\\n\\/** @var pdoTools $pdoTools *\\/\\n$pdoTools = $modx->getService(\'pdoTools\');\\n\\nreturn $pdoTools->getChunk($tpl, array(\\n    \'options\' => $options,\\n));"}',
);