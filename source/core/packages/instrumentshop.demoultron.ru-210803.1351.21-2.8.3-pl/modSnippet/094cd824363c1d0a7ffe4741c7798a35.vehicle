<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '54765b52e7d0c2919f92c3484926a38d',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '094cd824363c1d0a7ffe4741c7798a35',
  'native_key' => 15,
  'object' => '{"id":15,"source":0,"property_preprocess":0,"name":"migxResourceMediaPath","description":"","editor_type":0,"category":3,"cache_type":0,"snippet":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createFolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\n        $ctx = $resource->get(\'context_key\');\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n    }\\n    \\n    if (!empty($tvname)){\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\n    }\\n    $path = str_replace(\'{id}\', $docid, $path);\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    if ($template = $resource->getOne(\'Template\')) {\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\n    }\\n    if ($user = $modx->user) {\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        } else {\\n            chmod($fullpath, $permissions);\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createFolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\n        $ctx = $resource->get(\'context_key\');\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n    }\\n    \\n    if (!empty($tvname)){\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\n    }\\n    $path = str_replace(\'{id}\', $docid, $path);\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    if ($template = $resource->getOne(\'Template\')) {\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\n    }\\n    if ($user = $modx->user) {\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        } else {\\n            chmod($fullpath, $permissions);\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}"}',
);