<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'b962f778d78e1424296435d92272e6ca',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'a721a5a58c57d51d7e0570ca9cfafffd',
  'native_key' => 112,
  'object' => '{"id":112,"source":0,"property_preprocess":0,"name":"migxGetObject","description":"","editor_type":0,"category":3,"cache_type":0,"snippet":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\nmigxGetObject - properties\\n\\n$id\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\n\\n*\\/\\n\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\n$scriptProperties[\'limit\'] = 1;\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\nif (!empty($id)){\\n    $c->where(array(\'id\'=>$id));\\n\\t$c->prepare();\\n}\\t\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\nmigxGetObject - properties\\n\\n$id\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\n\\n*\\/\\n\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\n$scriptProperties[\'limit\'] = 1;\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\nif (!empty($id)){\\n    $c->where(array(\'id\'=>$id));\\n\\t$c->prepare();\\n}\\t\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;"}',
);