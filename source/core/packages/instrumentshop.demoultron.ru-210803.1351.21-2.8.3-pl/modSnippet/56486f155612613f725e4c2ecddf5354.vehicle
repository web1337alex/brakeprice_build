<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '785576d8a29e229b92a2ba6298ab6eb7',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '56486f155612613f725e4c2ecddf5354',
  'native_key' => 56,
  'object' => '{"id":56,"source":1,"property_preprocess":0,"name":"pdoField","description":"","editor_type":0,"category":12,"cache_type":0,"snippet":"\\/** @var array $scriptProperties *\\/\\nif (!empty($input)) {\\n    $id = $input;\\n}\\nif (!isset($default)) {\\n    $default = \'\';\\n}\\nif (!isset($output)) {\\n    $output = \'\';\\n}\\n$class = $modx->getOption(\'class\', $scriptProperties, \'modResource\', true);\\n$isResource = $class == \'modResource\' || in_array($class, $modx->getDescendants(\'modResource\'));\\n\\nif (empty($field)) {\\n    $field = \'pagetitle\';\\n}\\n$top = isset($top) ? intval($top) : 0;\\n$topLevel = isset($topLevel) ? intval($topLevel) : 0;\\nif (!empty($options)) {\\n    $options = trim($options);\\n    if ($options[0] == \'{\') {\\n        $tmp = json_decode($options, true);\\n        if (is_array($tmp)) {\\n            extract($tmp);\\n            $scriptProperties = array_merge($scriptProperties, $tmp);\\n        }\\n    } else {\\n        $field = $options;\\n    }\\n}\\nif (empty($id)) {\\n    if (!empty($modx->resource)) {\\n        $id = $modx->resource->id;\\n    } else {\\n        return \'You must specify an id of \' . $class;\\n    }\\n}\\nif (!isset($context)) {\\n    $context = \'\';\\n}\\n\\n\\/\\/ Gets the parent from root of context, if specified\\nif ($isResource && $id && ($top || $topLevel)) {\\n    \\/\\/ Select needed context for parents functionality\\n    if (empty($context)) {\\n        $q = $modx->newQuery($class, $id);\\n        $q->select(\'context_key\');\\n        $tstart = microtime(true);\\n        if ($q->prepare() && $q->stmt->execute()) {\\n            $modx->queryTime += microtime(true) - $tstart;\\n            $modx->executedQueries++;\\n            $context = $q->stmt->fetch(PDO::FETCH_COLUMN);\\n        }\\n    }\\n    \\/\\/ Original pdoField logic\\n    if (empty($ultimate)) {\\n        if ($topLevel) {\\n            $pids = $modx->getChildIds(0, $topLevel, array(\'context\' => $context));\\n            $pid = $id;\\n            while (true) {\\n                $tmp = $modx->getParentIds($pid, 1, array(\'context\' => $context));\\n                if (!$pid = current($tmp)) {\\n                    break;\\n                } elseif (in_array($pid, $pids)) {\\n                    $id = $pid;\\n                    break;\\n                }\\n            }\\n        } elseif ($top) {\\n            $pid = $id;\\n            for ($i = 1; $i <= $top; $i++) {\\n                $tmp = $modx->getParentIds($pid, 1, array(\'context\' => $context));\\n                if (!$pid = current($tmp)) {\\n                    break;\\n                }\\n                $id = $pid;\\n            }\\n        }\\n    }\\n    \\/\\/ UltimateParent logic\\n    \\/\\/ https:\\/\\/github.com\\/splittingred\\/UltimateParent\\/blob\\/develop\\/core\\/components\\/ultimateparent\\/snippet.ultimateparent.php\\n    elseif ($id != $top) {\\n        $pid = $id;\\n        $pids = $modx->getParentIds($id, 10, array(\'context\' => $context));\\n        if (!$topLevel || count($pids) >= $topLevel) {\\n            while ($parentIds = $modx->getParentIds($id, 1, array(\'context\' => $context))) {\\n                $pid = array_pop($parentIds);\\n                if ($pid == $top) {\\n                    break;\\n                }\\n                $id = $pid;\\n                $parentIds = $modx->getParentIds($id, 10, array(\'context\' => $context));\\n                if ($topLevel && count($parentIds) < $topLevel) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded\');\\n\\n$where = array($class . \'.id\' => $id);\\n\\/\\/ Add custom parameters\\nforeach (array(\'where\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Fields to select\\n$resourceColumns = array_keys($modx->getFieldMeta($class));\\n$field = strtolower($field);\\nif (in_array($field, $resourceColumns)) {\\n    $scriptProperties[\'select\'] = array($class => $field);\\n    $scriptProperties[\'includeTVs\'] = \'\';\\n} elseif ($isResource) {\\n    $scriptProperties[\'select\'] = array($class => \'id\');\\n    $scriptProperties[\'includeTVs\'] = $field;\\n}\\n\\/\\/ Additional default field\\nif (!empty($default)) {\\n    $default = strtolower($default);\\n    if (in_array($default, $resourceColumns)) {\\n        $scriptProperties[\'select\'][$class] .= \',\' . $default;\\n    } elseif ($isResource) {\\n        $scriptProperties[\'includeTVs\'] = empty($scriptProperties[\'includeTVs\'])\\n            ? $default\\n            : $scriptProperties[\'includeTVs\'] . \',\' . $default;\\n    }\\n}\\n\\n$scriptProperties[\'disableConditions\'] = true;\\nif ($row = $pdoFetch->getObject($class, $where, $scriptProperties)) {\\n    foreach ($row as $k => $v) {\\n        if (strtolower($k) == $field && $v != \'\') {\\n            $output = $v;\\n            break;\\n        }\\n    }\\n\\n    if (empty($output) && !empty($default)) {\\n        foreach ($row as $k => $v) {\\n            if (strtolower($k) == $default && $v != \'\') {\\n                $output = $v;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}","locked":0,"properties":"a:12:{s:2:\\"id\\";a:7:{s:4:\\"name\\";s:2:\\"id\\";s:4:\\"desc\\";s:16:\\"pdotools_prop_id\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"field\\";a:7:{s:4:\\"name\\";s:5:\\"field\\";s:4:\\"desc\\";s:19:\\"pdotools_prop_field\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:9:\\"pagetitle\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"prepareTVs\\";a:7:{s:4:\\"name\\";s:10:\\"prepareTVs\\";s:4:\\"desc\\";s:24:\\"pdotools_prop_prepareTVs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"1\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"processTVs\\";a:7:{s:4:\\"name\\";s:10:\\"processTVs\\";s:4:\\"desc\\";s:24:\\"pdotools_prop_processTVs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:19:\\"pdotools_prop_where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"context\\";a:7:{s:4:\\"name\\";s:7:\\"context\\";s:4:\\"desc\\";s:27:\\"pdotools_prop_field_context\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"top\\";a:7:{s:4:\\"name\\";s:3:\\"top\\";s:4:\\"desc\\";s:17:\\"pdotools_prop_top\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"topLevel\\";a:7:{s:4:\\"name\\";s:8:\\"topLevel\\";s:4:\\"desc\\";s:22:\\"pdotools_prop_topLevel\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"default\\";a:7:{s:4:\\"name\\";s:7:\\"default\\";s:4:\\"desc\\";s:27:\\"pdotools_prop_field_default\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"output\\";a:7:{s:4:\\"name\\";s:6:\\"output\\";s:4:\\"desc\\";s:26:\\"pdotools_prop_field_output\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:27:\\"pdotools_prop_toPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"ultimate\\";a:7:{s:4:\\"name\\";s:8:\\"ultimate\\";s:4:\\"desc\\";s:22:\\"pdotools_prop_ultimate\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:19:\\"pdotools:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/pdotools\\/elements\\/snippets\\/snippet.pdofield.php","content":"\\/** @var array $scriptProperties *\\/\\nif (!empty($input)) {\\n    $id = $input;\\n}\\nif (!isset($default)) {\\n    $default = \'\';\\n}\\nif (!isset($output)) {\\n    $output = \'\';\\n}\\n$class = $modx->getOption(\'class\', $scriptProperties, \'modResource\', true);\\n$isResource = $class == \'modResource\' || in_array($class, $modx->getDescendants(\'modResource\'));\\n\\nif (empty($field)) {\\n    $field = \'pagetitle\';\\n}\\n$top = isset($top) ? intval($top) : 0;\\n$topLevel = isset($topLevel) ? intval($topLevel) : 0;\\nif (!empty($options)) {\\n    $options = trim($options);\\n    if ($options[0] == \'{\') {\\n        $tmp = json_decode($options, true);\\n        if (is_array($tmp)) {\\n            extract($tmp);\\n            $scriptProperties = array_merge($scriptProperties, $tmp);\\n        }\\n    } else {\\n        $field = $options;\\n    }\\n}\\nif (empty($id)) {\\n    if (!empty($modx->resource)) {\\n        $id = $modx->resource->id;\\n    } else {\\n        return \'You must specify an id of \' . $class;\\n    }\\n}\\nif (!isset($context)) {\\n    $context = \'\';\\n}\\n\\n\\/\\/ Gets the parent from root of context, if specified\\nif ($isResource && $id && ($top || $topLevel)) {\\n    \\/\\/ Select needed context for parents functionality\\n    if (empty($context)) {\\n        $q = $modx->newQuery($class, $id);\\n        $q->select(\'context_key\');\\n        $tstart = microtime(true);\\n        if ($q->prepare() && $q->stmt->execute()) {\\n            $modx->queryTime += microtime(true) - $tstart;\\n            $modx->executedQueries++;\\n            $context = $q->stmt->fetch(PDO::FETCH_COLUMN);\\n        }\\n    }\\n    \\/\\/ Original pdoField logic\\n    if (empty($ultimate)) {\\n        if ($topLevel) {\\n            $pids = $modx->getChildIds(0, $topLevel, array(\'context\' => $context));\\n            $pid = $id;\\n            while (true) {\\n                $tmp = $modx->getParentIds($pid, 1, array(\'context\' => $context));\\n                if (!$pid = current($tmp)) {\\n                    break;\\n                } elseif (in_array($pid, $pids)) {\\n                    $id = $pid;\\n                    break;\\n                }\\n            }\\n        } elseif ($top) {\\n            $pid = $id;\\n            for ($i = 1; $i <= $top; $i++) {\\n                $tmp = $modx->getParentIds($pid, 1, array(\'context\' => $context));\\n                if (!$pid = current($tmp)) {\\n                    break;\\n                }\\n                $id = $pid;\\n            }\\n        }\\n    }\\n    \\/\\/ UltimateParent logic\\n    \\/\\/ https:\\/\\/github.com\\/splittingred\\/UltimateParent\\/blob\\/develop\\/core\\/components\\/ultimateparent\\/snippet.ultimateparent.php\\n    elseif ($id != $top) {\\n        $pid = $id;\\n        $pids = $modx->getParentIds($id, 10, array(\'context\' => $context));\\n        if (!$topLevel || count($pids) >= $topLevel) {\\n            while ($parentIds = $modx->getParentIds($id, 1, array(\'context\' => $context))) {\\n                $pid = array_pop($parentIds);\\n                if ($pid == $top) {\\n                    break;\\n                }\\n                $id = $pid;\\n                $parentIds = $modx->getParentIds($id, 10, array(\'context\' => $context));\\n                if ($topLevel && count($parentIds) < $topLevel) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded\');\\n\\n$where = array($class . \'.id\' => $id);\\n\\/\\/ Add custom parameters\\nforeach (array(\'where\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Fields to select\\n$resourceColumns = array_keys($modx->getFieldMeta($class));\\n$field = strtolower($field);\\nif (in_array($field, $resourceColumns)) {\\n    $scriptProperties[\'select\'] = array($class => $field);\\n    $scriptProperties[\'includeTVs\'] = \'\';\\n} elseif ($isResource) {\\n    $scriptProperties[\'select\'] = array($class => \'id\');\\n    $scriptProperties[\'includeTVs\'] = $field;\\n}\\n\\/\\/ Additional default field\\nif (!empty($default)) {\\n    $default = strtolower($default);\\n    if (in_array($default, $resourceColumns)) {\\n        $scriptProperties[\'select\'][$class] .= \',\' . $default;\\n    } elseif ($isResource) {\\n        $scriptProperties[\'includeTVs\'] = empty($scriptProperties[\'includeTVs\'])\\n            ? $default\\n            : $scriptProperties[\'includeTVs\'] . \',\' . $default;\\n    }\\n}\\n\\n$scriptProperties[\'disableConditions\'] = true;\\nif ($row = $pdoFetch->getObject($class, $where, $scriptProperties)) {\\n    foreach ($row as $k => $v) {\\n        if (strtolower($k) == $field && $v != \'\') {\\n            $output = $v;\\n            break;\\n        }\\n    }\\n\\n    if (empty($output) && !empty($default)) {\\n        foreach ($row as $k => $v) {\\n            if (strtolower($k) == $default && $v != \'\') {\\n                $output = $v;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}"}',
);