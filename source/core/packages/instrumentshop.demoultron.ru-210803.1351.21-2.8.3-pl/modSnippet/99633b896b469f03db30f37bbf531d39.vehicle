<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '799556d0bec36f80ec21fde449cbbe0e',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '99633b896b469f03db30f37bbf531d39',
  'native_key' => 79,
  'object' => '{"id":79,"source":1,"property_preprocess":0,"name":"msGetOrder","description":"","editor_type":0,"category":22,"cache_type":0,"snippet":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msGetOrder\');\\n\\nif (empty($id) && !empty($_GET[\'msorder\'])) {\\n    $id = (int)$_GET[\'msorder\'];\\n}\\nif (empty($id)) {\\n    return;\\n}\\n\\/** @var msOrder $order *\\/\\nif (!$order = $modx->getObject(\'msOrder\', compact(\'id\'))) {\\n    return $modx->lexicon(\'ms2_err_order_nf\');\\n}\\n$canView = (!empty($_SESSION[\'minishop2\'][\'orders\']) && in_array($id, $_SESSION[\'minishop2\'][\'orders\'])) ||\\n    $order->get(\'user_id\') == $modx->user->id || $modx->user->hasSessionContext(\'mgr\') || !empty($scriptProperties[\'id\']);\\nif (!$canView) {\\n    return \'\';\\n}\\n\\n\\/\\/ Select ordered products\\n$where = array(\\n    \'msOrderProduct.order_id\' => $id,\\n);\\n\\n\\/\\/ Include products properties\\n$leftJoin = array(\\n    \'msProduct\' => array(\\n        \'class\' => \'msProduct\',\\n        \'on\' => \'msProduct.id = msOrderProduct.product_id\',\\n    ),\\n    \'Data\' => array(\\n        \'class\' => \'msProductData\',\\n        \'on\' => \'msProduct.id = Data.id\',\\n    ),\\n    \'Vendor\' => array(\\n        \'class\' => \'msVendor\',\\n        \'on\' => \'Data.vendor = Vendor.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msProduct\' => !empty($includeContent)\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'),\\n            true) . \',`Data`.`price` as `original_price`\',\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\n    \'OrderProduct\' => $modx->getSelectColumns(\'msOrderProduct\', \'msOrderProduct\', \'\', array(\'id\'), true).\', `msOrderProduct`.`id` as `order_product_id`\',\\n);\\n\\n\\/\\/ Include products thumbnails\\nif (!empty($includeThumbs)) {\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\n    if (!empty($thumbs[0])) {\\n        foreach ($thumbs as $thumb) {\\n            $leftJoin[$thumb] = array(\\n                \'class\' => \'msProductFile\',\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\'\\",\\n            );\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\n        }\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\n    }\\n}\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Tables for joining\\n$default = array(\\n    \'class\' => \'msOrderProduct\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'joinTVsTo\' => \'msProduct\',\\n    \'sortby\' => \'msOrderProduct.id\',\\n    \'sortdir\' => \'asc\',\\n    \'groupby\' => \'msOrderProduct.id\',\\n    \'fastMode\' => false,\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'decodeJSON\' => true,\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), true);\\n$rows = $pdoFetch->run();\\n\\n$products = array();\\n$cart_count = 0;\\nforeach ($rows as $product) {\\n    $product[\'old_price\'] = $miniShop2->formatPrice(\\n        $product[\'original_price\'] > $product[\'price\']\\n            ? $product[\'original_price\']\\n            : $product[\'old_price\']\\n    );\\n    $product[\'price\'] = $miniShop2->formatPrice($product[\'price\']);\\n    $product[\'cost\'] = $miniShop2->formatPrice($product[\'cost\']);\\n    $product[\'weight\'] = $miniShop2->formatWeight($product[\'weight\']);\\n\\n    $product[\'id\'] = (int)$product[\'id\'];\\n    if (empty($product[\'name\'])) {\\n        $product[\'name\'] = $product[\'pagetitle\'];\\n    } else {\\n        $product[\'pagetitle\'] = $product[\'name\'];\\n    }\\n\\n    \\/\\/ Additional properties of product\\n    if (!empty($product[\'options\']) && is_array($product[\'options\'])) {\\n        foreach ($product[\'options\'] as $option => $value) {\\n            $product[\'option.\' . $option] = $value;\\n        }\\n    }\\n\\n    \\/\\/ Add option values\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array($modx, $product[\'id\']));\\n    $products[] = array_merge($product, $options);\\n\\n    \\/\\/ Count total\\n    $cart_count += $product[\'count\'];\\n}\\n\\n$pls = array_merge($scriptProperties, array(\\n    \'order\' => $order->toArray(),\\n    \'products\' => $products,\\n    \'user\' => ($tmp = $order->getOne(\'User\'))\\n        ? array_merge($tmp->getOne(\'Profile\')->toArray(), $tmp->toArray())\\n        : array(),\\n    \'address\' => ($tmp = $order->getOne(\'Address\'))\\n        ? $tmp->toArray()\\n        : array(),\\n    \'delivery\' => ($tmp = $order->getOne(\'Delivery\'))\\n        ? $tmp->toArray()\\n        : array(),\\n    \'payment\' => ($payment = $order->getOne(\'Payment\'))\\n        ? $payment->toArray()\\n        : array(),\\n    \'total\' => array(\\n        \'cost\' => $miniShop2->formatPrice($order->get(\'cost\')),\\n        \'cart_cost\' => $miniShop2->formatPrice($order->get(\'cart_cost\')),\\n        \'delivery_cost\' => $miniShop2->formatPrice($order->get(\'delivery_cost\')),\\n        \'weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\n        \'cart_weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\n        \'cart_count\' => $cart_count,\\n    ),\\n));\\n\\n\\/\\/ add \\"payment\\" link\\nif ($payment AND $class = $payment->get(\'class\')) {\\n    $status = $modx->getOption(\'payStatus\', $scriptProperties, \'1\');\\n    $status = array_map(\'trim\', explode(\',\', $status));\\n    if (in_array($order->get(\'status\'), $status)) {\\n        $miniShop2->loadCustomClasses(\'payment\');\\n        if (class_exists($class)) {\\n            \\/** @var msPaymentHandler|PayPal $handler *\\/\\n            $handler = new $class($order);\\n            if (method_exists($handler, \'getPaymentLink\')) {\\n                $link = $handler->getPaymentLink($order);\\n                $pls[\'payment_link\'] = $link;\\n            }\\n        }\\n    }\\n}\\n\\n$output = $pdoFetch->getChunk($tpl, $pls);\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msGetOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}","locked":0,"properties":"a:5:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:12:\\"ms2_prop_tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:14:\\"tpl.msGetOrder\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"includeTVs\\";a:7:{s:4:\\"name\\";s:10:\\"includeTVs\\";s:4:\\"desc\\";s:19:\\"ms2_prop_includeTVs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"includeThumbs\\";a:7:{s:4:\\"name\\";s:13:\\"includeThumbs\\";s:4:\\"desc\\";s:22:\\"ms2_prop_includeThumbs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:22:\\"ms2_prop_toPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"showLog\\";a:7:{s:4:\\"name\\";s:7:\\"showLog\\";s:4:\\"desc\\";s:16:\\"ms2_prop_showLog\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minishop2\\/elements\\/snippets\\/snippet.ms_get_order.php","content":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msGetOrder\');\\n\\nif (empty($id) && !empty($_GET[\'msorder\'])) {\\n    $id = (int)$_GET[\'msorder\'];\\n}\\nif (empty($id)) {\\n    return;\\n}\\n\\/** @var msOrder $order *\\/\\nif (!$order = $modx->getObject(\'msOrder\', compact(\'id\'))) {\\n    return $modx->lexicon(\'ms2_err_order_nf\');\\n}\\n$canView = (!empty($_SESSION[\'minishop2\'][\'orders\']) && in_array($id, $_SESSION[\'minishop2\'][\'orders\'])) ||\\n    $order->get(\'user_id\') == $modx->user->id || $modx->user->hasSessionContext(\'mgr\') || !empty($scriptProperties[\'id\']);\\nif (!$canView) {\\n    return \'\';\\n}\\n\\n\\/\\/ Select ordered products\\n$where = array(\\n    \'msOrderProduct.order_id\' => $id,\\n);\\n\\n\\/\\/ Include products properties\\n$leftJoin = array(\\n    \'msProduct\' => array(\\n        \'class\' => \'msProduct\',\\n        \'on\' => \'msProduct.id = msOrderProduct.product_id\',\\n    ),\\n    \'Data\' => array(\\n        \'class\' => \'msProductData\',\\n        \'on\' => \'msProduct.id = Data.id\',\\n    ),\\n    \'Vendor\' => array(\\n        \'class\' => \'msVendor\',\\n        \'on\' => \'Data.vendor = Vendor.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msProduct\' => !empty($includeContent)\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'),\\n            true) . \',`Data`.`price` as `original_price`\',\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\n    \'OrderProduct\' => $modx->getSelectColumns(\'msOrderProduct\', \'msOrderProduct\', \'\', array(\'id\'), true).\', `msOrderProduct`.`id` as `order_product_id`\',\\n);\\n\\n\\/\\/ Include products thumbnails\\nif (!empty($includeThumbs)) {\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\n    if (!empty($thumbs[0])) {\\n        foreach ($thumbs as $thumb) {\\n            $leftJoin[$thumb] = array(\\n                \'class\' => \'msProductFile\',\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\'\\",\\n            );\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\n        }\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\n    }\\n}\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Tables for joining\\n$default = array(\\n    \'class\' => \'msOrderProduct\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'joinTVsTo\' => \'msProduct\',\\n    \'sortby\' => \'msOrderProduct.id\',\\n    \'sortdir\' => \'asc\',\\n    \'groupby\' => \'msOrderProduct.id\',\\n    \'fastMode\' => false,\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'decodeJSON\' => true,\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), true);\\n$rows = $pdoFetch->run();\\n\\n$products = array();\\n$cart_count = 0;\\nforeach ($rows as $product) {\\n    $product[\'old_price\'] = $miniShop2->formatPrice(\\n        $product[\'original_price\'] > $product[\'price\']\\n            ? $product[\'original_price\']\\n            : $product[\'old_price\']\\n    );\\n    $product[\'price\'] = $miniShop2->formatPrice($product[\'price\']);\\n    $product[\'cost\'] = $miniShop2->formatPrice($product[\'cost\']);\\n    $product[\'weight\'] = $miniShop2->formatWeight($product[\'weight\']);\\n\\n    $product[\'id\'] = (int)$product[\'id\'];\\n    if (empty($product[\'name\'])) {\\n        $product[\'name\'] = $product[\'pagetitle\'];\\n    } else {\\n        $product[\'pagetitle\'] = $product[\'name\'];\\n    }\\n\\n    \\/\\/ Additional properties of product\\n    if (!empty($product[\'options\']) && is_array($product[\'options\'])) {\\n        foreach ($product[\'options\'] as $option => $value) {\\n            $product[\'option.\' . $option] = $value;\\n        }\\n    }\\n\\n    \\/\\/ Add option values\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array($modx, $product[\'id\']));\\n    $products[] = array_merge($product, $options);\\n\\n    \\/\\/ Count total\\n    $cart_count += $product[\'count\'];\\n}\\n\\n$pls = array_merge($scriptProperties, array(\\n    \'order\' => $order->toArray(),\\n    \'products\' => $products,\\n    \'user\' => ($tmp = $order->getOne(\'User\'))\\n        ? array_merge($tmp->getOne(\'Profile\')->toArray(), $tmp->toArray())\\n        : array(),\\n    \'address\' => ($tmp = $order->getOne(\'Address\'))\\n        ? $tmp->toArray()\\n        : array(),\\n    \'delivery\' => ($tmp = $order->getOne(\'Delivery\'))\\n        ? $tmp->toArray()\\n        : array(),\\n    \'payment\' => ($payment = $order->getOne(\'Payment\'))\\n        ? $payment->toArray()\\n        : array(),\\n    \'total\' => array(\\n        \'cost\' => $miniShop2->formatPrice($order->get(\'cost\')),\\n        \'cart_cost\' => $miniShop2->formatPrice($order->get(\'cart_cost\')),\\n        \'delivery_cost\' => $miniShop2->formatPrice($order->get(\'delivery_cost\')),\\n        \'weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\n        \'cart_weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\n        \'cart_count\' => $cart_count,\\n    ),\\n));\\n\\n\\/\\/ add \\"payment\\" link\\nif ($payment AND $class = $payment->get(\'class\')) {\\n    $status = $modx->getOption(\'payStatus\', $scriptProperties, \'1\');\\n    $status = array_map(\'trim\', explode(\',\', $status));\\n    if (in_array($order->get(\'status\'), $status)) {\\n        $miniShop2->loadCustomClasses(\'payment\');\\n        if (class_exists($class)) {\\n            \\/** @var msPaymentHandler|PayPal $handler *\\/\\n            $handler = new $class($order);\\n            if (method_exists($handler, \'getPaymentLink\')) {\\n                $link = $handler->getPaymentLink($order);\\n                $pls[\'payment_link\'] = $link;\\n            }\\n        }\\n    }\\n}\\n\\n$output = $pdoFetch->getChunk($tpl, $pls);\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msGetOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}"}',
);