<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'e781b997a83e14d6efdc6e6fbc219246',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'e8610daae8ea56a75d0278d044145507',
  'native_key' => 12,
  'object' => '{"id":12,"source":0,"property_preprocess":0,"name":"migxGetRelations","description":"","editor_type":0,"category":3,"cache_type":0,"snippet":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
);