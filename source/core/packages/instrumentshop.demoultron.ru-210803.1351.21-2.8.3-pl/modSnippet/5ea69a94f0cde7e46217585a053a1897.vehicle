<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '59306629931e453abdb7278eb1f2c013',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '5ea69a94f0cde7e46217585a053a1897',
  'native_key' => 78,
  'object' => '{"id":78,"source":1,"property_preprocess":0,"name":"msOrder","description":"","editor_type":0,"category":22,"cache_type":0,"snippet":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msOrder\');\\n\\n\\/\\/ Do not show order form when displaying details of existing order\\nif (!empty($_GET[\'msorder\'])) {\\n    return \'\';\\n}\\n\\n$cart = $miniShop2->cart->get();\\n$order = $miniShop2->order->get();\\n$status = $miniShop2->cart->status();\\nif (empty($status[\'total_count\'])) {\\n    return \'\';\\n}\\n$cost = $miniShop2->order->getCost();\\n$order[\'cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'cost\']);\\n$order[\'cart_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'cart_cost\']);\\n$order[\'delivery_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'delivery_cost\']);\\n$order[\'discount_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'discount_cost\']);\\n\\n\\/\\/ We need only active methods\\n$where = array(\\n    \'msDelivery.active\' => true,\\n    \'msPayment.active\' => true,\\n);\\n\\n\\/\\/ Join payments to deliveries\\n$leftJoin = array(\\n    \'Payments\' => array(\\n        \'class\' => \'msDeliveryMember\',\\n    ),\\n    \'msPayment\' => array(\\n        \'class\' => \'msPayment\',\\n        \'on\' => \'Payments.payment_id = msPayment.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msDelivery\' => $modx->getSelectColumns(\'msDelivery\', \'msDelivery\', \'delivery_\'),\\n    \'msPayment\' => $modx->getSelectColumns(\'msPayment\', \'msPayment\', \'payment_\'),\\n);\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Default parameters\\n$default = array(\\n    \'class\' => \'msDelivery\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'sortby\' => \'msDelivery.rank asc, msPayment.rank\',\\n    \'sortdir\' => \'asc\',\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), false);\\n$rows = $pdoFetch->run();\\n\\n$deliveries = $payments = array();\\nforeach ($rows as $row) {\\n    $delivery = array();\\n    $payment = array();\\n    foreach ($row as $key => $value) {\\n        if (strpos($key, \'delivery_\') === 0) {\\n            $delivery[substr($key, 9)] = $value;\\n        } else {\\n            $payment[substr($key, 8)] = $value;\\n        }\\n    }\\n\\n    if (!isset($deliveries[$delivery[\'id\']])) {\\n        $delivery[\'payments\'] = array();\\n        $deliveries[$delivery[\'id\']] = $delivery;\\n    }\\n    if (!empty($payment[\'id\'])) {\\n        $deliveries[$delivery[\'id\']][\'payments\'][] = (int)$payment[\'id\'];\\n        if (!isset($payments[$payment[\'id\']])) {\\n            $payments[$payment[\'id\']] = $payment;\\n        }\\n    }\\n}\\n\\n$form = array();\\n\\/\\/ Get user data\\n$profile = array();\\nif ($modx->user->isAuthenticated($modx->context->key)) {\\n    $profile = array_merge($modx->user->Profile->toArray(), $modx->user->toArray());\\n}\\n$fields = array(\\n    \'receiver\' => \'fullname\',\\n    \'phone\' => \'phone\',\\n    \'email\' => \'email\',\\n    \'comment\' => \'extended[comment]\',\\n    \'index\' => \'zip\',\\n    \'country\' => \'country\',\\n    \'region\' => \'state\',\\n    \'city\' => \'city\',\\n    \'street\' => \'address\',\\n    \'building\' => \'extended[building]\',\\n    \'room\' => \'extended[room]\',\\n);\\n\\/\\/ Apply custom fields\\nif (!empty($userFields)) {\\n    if (!is_array($userFields)) {\\n        $userFields = json_decode($userFields, true);\\n    }\\n    if (is_array($userFields)) {\\n        $fields = array_merge($fields, $userFields);\\n    }\\n}\\n\\/\\/ Set user fields\\nforeach ($fields as $key => $value) {\\n    if (!empty($profile) && !empty($value)) {\\n        if (strpos($value, \'extended\') !== false) {\\n            $tmp = substr($value, 9, -1);\\n            $value = !empty($profile[\'extended\'][$tmp])\\n                ? $profile[\'extended\'][$tmp]\\n                : \'\';\\n        } else {\\n            $value = $profile[$value];\\n        }\\n        $response = $miniShop2->order->add($key, $value);\\n        if ($response[\'success\'] && !empty($response[\'data\'][$key])) {\\n            $form[$key] = $response[\'data\'][$key];\\n        }\\n    }\\n    if (empty($form[$key]) && !empty($order[$key])) {\\n        $form[$key] = $order[$key];\\n        unset($order[$key]);\\n    }\\n}\\n\\n\\/\\/ Check for errors\\n$errors = array();\\nif (!empty($_POST)) {\\n    $response = $miniShop2->order->getDeliveryRequiresFields();\\n    if ($requires = $response[\'data\'][\'requires\']) {\\n        foreach ($_POST as $field => $val) {\\n            $validated = $miniShop2->order->validate($field, $val);\\n            if ((in_array($field, $requires) && empty($validated))) {\\n                $errors[] = $field;\\n            }\\n        }\\n    }\\n\\n}\\n\\n$output = $pdoFetch->getChunk($tpl, array(\\n    \'order\' => $order,\\n    \'form\' => $form,\\n    \'deliveries\' => $deliveries,\\n    \'payments\' => $payments,\\n    \'errors\' => $errors,\\n));\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nreturn $output;","locked":0,"properties":"a:3:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:12:\\"ms2_prop_tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:11:\\"tpl.msOrder\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"userFields\\";a:7:{s:4:\\"name\\";s:10:\\"userFields\\";s:4:\\"desc\\";s:19:\\"ms2_prop_userFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"showLog\\";a:7:{s:4:\\"name\\";s:7:\\"showLog\\";s:4:\\"desc\\";s:16:\\"ms2_prop_showLog\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minishop2\\/elements\\/snippets\\/snippet.ms_order.php","content":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msOrder\');\\n\\n\\/\\/ Do not show order form when displaying details of existing order\\nif (!empty($_GET[\'msorder\'])) {\\n    return \'\';\\n}\\n\\n$cart = $miniShop2->cart->get();\\n$order = $miniShop2->order->get();\\n$status = $miniShop2->cart->status();\\nif (empty($status[\'total_count\'])) {\\n    return \'\';\\n}\\n$cost = $miniShop2->order->getCost();\\n$order[\'cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'cost\']);\\n$order[\'cart_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'cart_cost\']);\\n$order[\'delivery_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'delivery_cost\']);\\n$order[\'discount_cost\'] = $miniShop2->formatPrice($cost[\'data\'][\'discount_cost\']);\\n\\n\\/\\/ We need only active methods\\n$where = array(\\n    \'msDelivery.active\' => true,\\n    \'msPayment.active\' => true,\\n);\\n\\n\\/\\/ Join payments to deliveries\\n$leftJoin = array(\\n    \'Payments\' => array(\\n        \'class\' => \'msDeliveryMember\',\\n    ),\\n    \'msPayment\' => array(\\n        \'class\' => \'msPayment\',\\n        \'on\' => \'Payments.payment_id = msPayment.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msDelivery\' => $modx->getSelectColumns(\'msDelivery\', \'msDelivery\', \'delivery_\'),\\n    \'msPayment\' => $modx->getSelectColumns(\'msPayment\', \'msPayment\', \'payment_\'),\\n);\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n\\/\\/ Default parameters\\n$default = array(\\n    \'class\' => \'msDelivery\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'sortby\' => \'msDelivery.rank asc, msPayment.rank\',\\n    \'sortdir\' => \'asc\',\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), false);\\n$rows = $pdoFetch->run();\\n\\n$deliveries = $payments = array();\\nforeach ($rows as $row) {\\n    $delivery = array();\\n    $payment = array();\\n    foreach ($row as $key => $value) {\\n        if (strpos($key, \'delivery_\') === 0) {\\n            $delivery[substr($key, 9)] = $value;\\n        } else {\\n            $payment[substr($key, 8)] = $value;\\n        }\\n    }\\n\\n    if (!isset($deliveries[$delivery[\'id\']])) {\\n        $delivery[\'payments\'] = array();\\n        $deliveries[$delivery[\'id\']] = $delivery;\\n    }\\n    if (!empty($payment[\'id\'])) {\\n        $deliveries[$delivery[\'id\']][\'payments\'][] = (int)$payment[\'id\'];\\n        if (!isset($payments[$payment[\'id\']])) {\\n            $payments[$payment[\'id\']] = $payment;\\n        }\\n    }\\n}\\n\\n$form = array();\\n\\/\\/ Get user data\\n$profile = array();\\nif ($modx->user->isAuthenticated($modx->context->key)) {\\n    $profile = array_merge($modx->user->Profile->toArray(), $modx->user->toArray());\\n}\\n$fields = array(\\n    \'receiver\' => \'fullname\',\\n    \'phone\' => \'phone\',\\n    \'email\' => \'email\',\\n    \'comment\' => \'extended[comment]\',\\n    \'index\' => \'zip\',\\n    \'country\' => \'country\',\\n    \'region\' => \'state\',\\n    \'city\' => \'city\',\\n    \'street\' => \'address\',\\n    \'building\' => \'extended[building]\',\\n    \'room\' => \'extended[room]\',\\n);\\n\\/\\/ Apply custom fields\\nif (!empty($userFields)) {\\n    if (!is_array($userFields)) {\\n        $userFields = json_decode($userFields, true);\\n    }\\n    if (is_array($userFields)) {\\n        $fields = array_merge($fields, $userFields);\\n    }\\n}\\n\\/\\/ Set user fields\\nforeach ($fields as $key => $value) {\\n    if (!empty($profile) && !empty($value)) {\\n        if (strpos($value, \'extended\') !== false) {\\n            $tmp = substr($value, 9, -1);\\n            $value = !empty($profile[\'extended\'][$tmp])\\n                ? $profile[\'extended\'][$tmp]\\n                : \'\';\\n        } else {\\n            $value = $profile[$value];\\n        }\\n        $response = $miniShop2->order->add($key, $value);\\n        if ($response[\'success\'] && !empty($response[\'data\'][$key])) {\\n            $form[$key] = $response[\'data\'][$key];\\n        }\\n    }\\n    if (empty($form[$key]) && !empty($order[$key])) {\\n        $form[$key] = $order[$key];\\n        unset($order[$key]);\\n    }\\n}\\n\\n\\/\\/ Check for errors\\n$errors = array();\\nif (!empty($_POST)) {\\n    $response = $miniShop2->order->getDeliveryRequiresFields();\\n    if ($requires = $response[\'data\'][\'requires\']) {\\n        foreach ($_POST as $field => $val) {\\n            $validated = $miniShop2->order->validate($field, $val);\\n            if ((in_array($field, $requires) && empty($validated))) {\\n                $errors[] = $field;\\n            }\\n        }\\n    }\\n\\n}\\n\\n$output = $pdoFetch->getChunk($tpl, array(\\n    \'order\' => $order,\\n    \'form\' => $form,\\n    \'deliveries\' => $deliveries,\\n    \'payments\' => $payments,\\n    \'errors\' => $errors,\\n));\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nreturn $output;"}',
);