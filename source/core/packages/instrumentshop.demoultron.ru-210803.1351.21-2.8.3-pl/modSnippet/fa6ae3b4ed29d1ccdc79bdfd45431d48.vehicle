<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'a13baf5fe1234f2ec1a6e85f5f3aac20',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'fa6ae3b4ed29d1ccdc79bdfd45431d48',
  'native_key' => 74,
  'object' => '{"id":74,"source":1,"property_preprocess":0,"name":"msCart","description":"","editor_type":0,"category":22,"cache_type":0,"snippet":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msCart\');\\n$cart = $miniShop2->cart->get();\\n$status = $miniShop2->cart->status();\\n\\n\\/\\/ Do not show empty cart when displaying order details\\nif (!empty($_GET[\'msorder\'])) {\\n    return \'\';\\n} elseif (empty($status[\'total_count\'])) {\\n    return $pdoFetch->getChunk($tpl);\\n}\\n\\n\\/\\/ Select cart products\\n$where = array(\\n    \'msProduct.id:IN\' => array(),\\n);\\nforeach ($cart as $entry) {\\n    $where[\'msProduct.id:IN\'][] = $entry[\'id\'];\\n}\\n$where[\'msProduct.id:IN\'] = array_unique($where[\'msProduct.id:IN\']);\\n\\n\\/\\/ Include products properties\\n$leftJoin = array(\\n    \'Data\' => array(\\n        \'class\' => \'msProductData\',\\n    ),\\n    \'Vendor\' => array(\\n        \'class\' => \'msVendor\',\\n        \'on\' => \'Data.vendor = Vendor.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msProduct\' => !empty($includeContent)\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'), true),\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\n);\\n\\n\\/\\/ Include products thumbnails\\nif (!empty($includeThumbs)) {\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\n    if (!empty($thumbs[0])) {\\n        foreach ($thumbs as $thumb) {\\n            $leftJoin[$thumb] = array(\\n                \'class\' => \'msProductFile\',\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\' AND `{$thumb}`.rank = 0\\",\\n            );\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\n        }\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\n    }\\n}\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n$default = array(\\n    \'class\' => \'msProduct\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'sortby\' => \'msProduct.id\',\\n    \'sortdir\' => \'ASC\',\\n    \'groupby\' => \'msProduct.id\',\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), false);\\n\\n$tmp = $pdoFetch->run();\\n$rows = array();\\nforeach ($tmp as $row) {\\n    $rows[$row[\'id\']] = $row;\\n}\\n\\n\\/\\/ Process products in cart\\n$products = array();\\n$total = array(\'count\' => 0, \'weight\' => 0, \'cost\' => 0, \'discount\' => 0);\\nforeach ($cart as $key => $entry) {\\n    if (!isset($rows[$entry[\'id\']])) {\\n        continue;\\n    }\\n    $product = $rows[$entry[\'id\']];\\n\\n    $product[\'key\'] = $key;\\n    $product[\'count\'] = $entry[\'count\'];\\n    $old_price = $product[\'old_price\'];\\n    if ($product[\'price\'] > $entry[\'price\']) {\\n        $old_price = $product[\'price\'];\\n    }\\n    $discount_price = $old_price > 0 ? $old_price - $entry[\'price\'] : 0;\\n\\n    $product[\'old_price\'] = $miniShop2->formatPrice($old_price);\\n    $product[\'price\'] = $miniShop2->formatPrice($entry[\'price\']);\\n    $product[\'weight\'] = $miniShop2->formatWeight($entry[\'weight\']);\\n    $product[\'cost\'] = $miniShop2->formatPrice($entry[\'count\'] * $entry[\'price\']);\\n    $product[\'discount_price\'] = $miniShop2->formatPrice($discount_price);\\n    $product[\'discount_cost\'] = $miniShop2->formatPrice($entry[\'count\'] * $discount_price);\\n\\n    \\/\\/ Additional properties of product in cart\\n    if (!empty($entry[\'options\']) && is_array($entry[\'options\'])) {\\n        $product[\'options\'] = $entry[\'options\'];\\n        foreach ($entry[\'options\'] as $option => $value) {\\n            $product[\'option.\' . $option] = $value;\\n        }\\n    }\\n\\n    \\/\\/ Add option values\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array($modx, $product[\'id\']));\\n    $products[] = array_merge($product, $options);\\n\\n    \\/\\/ Count total\\n    $total[\'count\'] += $entry[\'count\'];\\n    $total[\'cost\'] += $entry[\'count\'] * $entry[\'price\'];\\n    $total[\'weight\'] += $entry[\'count\'] * $entry[\'weight\'];\\n    $total[\'discount\'] += $entry[\'count\'] * $discount_price;\\n}\\n$total[\'cost\'] = $miniShop2->formatPrice($total[\'cost\']);\\n$total[\'discount\'] = $miniShop2->formatPrice($total[\'discount\']);\\n$total[\'weight\'] = $miniShop2->formatWeight($total[\'weight\']);\\n\\n$output = $pdoFetch->getChunk($tpl, array(\\n    \'total\' => $total,\\n    \'products\' => $products,\\n));\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msCartLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}","locked":0,"properties":"a:5:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:12:\\"ms2_prop_tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"tpl.msCart\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"includeTVs\\";a:7:{s:4:\\"name\\";s:10:\\"includeTVs\\";s:4:\\"desc\\";s:19:\\"ms2_prop_includeTVs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"includeThumbs\\";a:7:{s:4:\\"name\\";s:13:\\"includeThumbs\\";s:4:\\"desc\\";s:22:\\"ms2_prop_includeThumbs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:22:\\"ms2_prop_toPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"showLog\\";a:7:{s:4:\\"name\\";s:7:\\"showLog\\";s:4:\\"desc\\";s:16:\\"ms2_prop_showLog\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minishop2\\/elements\\/snippets\\/snippet.ms_cart.php","content":"\\/** @var modX $modx *\\/\\n\\/** @var array $scriptProperties *\\/\\n\\/** @var miniShop2 $miniShop2 *\\/\\n$miniShop2 = $modx->getService(\'miniShop2\');\\n$miniShop2->initialize($modx->context->key);\\n\\/** @var pdoFetch $pdoFetch *\\/\\n$fqn = $modx->getOption(\'pdoFetch.class\', null, \'pdotools.pdofetch\', true);\\n$path = $modx->getOption(\'pdofetch_class_path\', null, MODX_CORE_PATH . \'components\\/pdotools\\/model\\/\', true);\\nif ($pdoClass = $modx->loadClass($fqn, $path, false, true)) {\\n    $pdoFetch = new $pdoClass($modx, $scriptProperties);\\n} else {\\n    return false;\\n}\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\n\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msCart\');\\n$cart = $miniShop2->cart->get();\\n$status = $miniShop2->cart->status();\\n\\n\\/\\/ Do not show empty cart when displaying order details\\nif (!empty($_GET[\'msorder\'])) {\\n    return \'\';\\n} elseif (empty($status[\'total_count\'])) {\\n    return $pdoFetch->getChunk($tpl);\\n}\\n\\n\\/\\/ Select cart products\\n$where = array(\\n    \'msProduct.id:IN\' => array(),\\n);\\nforeach ($cart as $entry) {\\n    $where[\'msProduct.id:IN\'][] = $entry[\'id\'];\\n}\\n$where[\'msProduct.id:IN\'] = array_unique($where[\'msProduct.id:IN\']);\\n\\n\\/\\/ Include products properties\\n$leftJoin = array(\\n    \'Data\' => array(\\n        \'class\' => \'msProductData\',\\n    ),\\n    \'Vendor\' => array(\\n        \'class\' => \'msVendor\',\\n        \'on\' => \'Data.vendor = Vendor.id\',\\n    ),\\n);\\n\\n\\/\\/ Select columns\\n$select = array(\\n    \'msProduct\' => !empty($includeContent)\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'), true),\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\n);\\n\\n\\/\\/ Include products thumbnails\\nif (!empty($includeThumbs)) {\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\n    if (!empty($thumbs[0])) {\\n        foreach ($thumbs as $thumb) {\\n            $leftJoin[$thumb] = array(\\n                \'class\' => \'msProductFile\',\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\' AND `{$thumb}`.rank = 0\\",\\n            );\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\n        }\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\n    }\\n}\\n\\n\\/\\/ Add user parameters\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\n    if (!empty($scriptProperties[$v])) {\\n        $tmp = $scriptProperties[$v];\\n        if (!is_array($tmp)) {\\n            $tmp = json_decode($tmp, true);\\n        }\\n        if (is_array($tmp)) {\\n            $$v = array_merge($$v, $tmp);\\n        }\\n    }\\n    unset($scriptProperties[$v]);\\n}\\n$pdoFetch->addTime(\'Conditions prepared\');\\n\\n$default = array(\\n    \'class\' => \'msProduct\',\\n    \'where\' => $where,\\n    \'leftJoin\' => $leftJoin,\\n    \'select\' => $select,\\n    \'sortby\' => \'msProduct.id\',\\n    \'sortdir\' => \'ASC\',\\n    \'groupby\' => \'msProduct.id\',\\n    \'limit\' => 0,\\n    \'return\' => \'data\',\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\n);\\n\\/\\/ Merge all properties and run!\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), false);\\n\\n$tmp = $pdoFetch->run();\\n$rows = array();\\nforeach ($tmp as $row) {\\n    $rows[$row[\'id\']] = $row;\\n}\\n\\n\\/\\/ Process products in cart\\n$products = array();\\n$total = array(\'count\' => 0, \'weight\' => 0, \'cost\' => 0, \'discount\' => 0);\\nforeach ($cart as $key => $entry) {\\n    if (!isset($rows[$entry[\'id\']])) {\\n        continue;\\n    }\\n    $product = $rows[$entry[\'id\']];\\n\\n    $product[\'key\'] = $key;\\n    $product[\'count\'] = $entry[\'count\'];\\n    $old_price = $product[\'old_price\'];\\n    if ($product[\'price\'] > $entry[\'price\']) {\\n        $old_price = $product[\'price\'];\\n    }\\n    $discount_price = $old_price > 0 ? $old_price - $entry[\'price\'] : 0;\\n\\n    $product[\'old_price\'] = $miniShop2->formatPrice($old_price);\\n    $product[\'price\'] = $miniShop2->formatPrice($entry[\'price\']);\\n    $product[\'weight\'] = $miniShop2->formatWeight($entry[\'weight\']);\\n    $product[\'cost\'] = $miniShop2->formatPrice($entry[\'count\'] * $entry[\'price\']);\\n    $product[\'discount_price\'] = $miniShop2->formatPrice($discount_price);\\n    $product[\'discount_cost\'] = $miniShop2->formatPrice($entry[\'count\'] * $discount_price);\\n\\n    \\/\\/ Additional properties of product in cart\\n    if (!empty($entry[\'options\']) && is_array($entry[\'options\'])) {\\n        $product[\'options\'] = $entry[\'options\'];\\n        foreach ($entry[\'options\'] as $option => $value) {\\n            $product[\'option.\' . $option] = $value;\\n        }\\n    }\\n\\n    \\/\\/ Add option values\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array($modx, $product[\'id\']));\\n    $products[] = array_merge($product, $options);\\n\\n    \\/\\/ Count total\\n    $total[\'count\'] += $entry[\'count\'];\\n    $total[\'cost\'] += $entry[\'count\'] * $entry[\'price\'];\\n    $total[\'weight\'] += $entry[\'count\'] * $entry[\'weight\'];\\n    $total[\'discount\'] += $entry[\'count\'] * $discount_price;\\n}\\n$total[\'cost\'] = $miniShop2->formatPrice($total[\'cost\']);\\n$total[\'discount\'] = $miniShop2->formatPrice($total[\'discount\']);\\n$total[\'weight\'] = $miniShop2->formatWeight($total[\'weight\']);\\n\\n$output = $pdoFetch->getChunk($tpl, array(\\n    \'total\' => $total,\\n    \'products\' => $products,\\n));\\n\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\n    $output .= \'<pre class=\\"msCartLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n} else {\\n    return $output;\\n}"}',
);