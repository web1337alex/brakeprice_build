<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '1b595d5bc94f75304383658822dd506d',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '483b1f0ece9087fe3c024a6ed45cd273',
  'native_key' => 52,
  'object' => '{"id":52,"source":0,"property_preprocess":0,"name":"FormItLoadSavedForm","description":"Prehook to load previously saved form.","editor_type":0,"category":11,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n\\/\\/ If prehook fails do we continue?\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\nif (!$updateSavedForm) return $return;\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n$formHashKey = \'\';\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\nif (strlen($formHashKey) !== 32) return $return;\\n\\n\\/\\/ Try to fetch the saved form\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\nif (!$savedForm) return $return;\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\n\\/\\/ Initialize the data array\\n\\/\\/ Handle encryption\\nif ($formEncrypt) {\\n    $encrypted_data = $savedForm->get(\'values\');\\n    $data = $savedForm->decrypt($encrypted_data);\\n} else {\\n    $data = $savedForm->get(\'values\');\\n}\\nif (is_string($data)) $data = $modx->fromJSON($data);\\nif (!is_array($data)) return $return;\\n\\n\\/\\/Change the fieldnames\\nif ($fieldNames) {\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        \\/\\/ reverse order from FormItSaveForm snippet\\n        $fieldLabels[trim($label)] = trim($name);\\n    }\\n    foreach ($data as $key => $value) {\\n        if ($fieldLabels[$key]) {\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $data = $newDataArray;\\n}\\n\\n\\/\\/ Always pass back in the provided hash key\\n$data[$formHashKeyField] = $formHashKey;\\n$hook->setValues($data);\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n\\/\\/ If prehook fails do we continue?\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\nif (!$updateSavedForm) return $return;\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n$formHashKey = \'\';\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\nif (strlen($formHashKey) !== 32) return $return;\\n\\n\\/\\/ Try to fetch the saved form\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\nif (!$savedForm) return $return;\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\n\\/\\/ Initialize the data array\\n\\/\\/ Handle encryption\\nif ($formEncrypt) {\\n    $encrypted_data = $savedForm->get(\'values\');\\n    $data = $savedForm->decrypt($encrypted_data);\\n} else {\\n    $data = $savedForm->get(\'values\');\\n}\\nif (is_string($data)) $data = $modx->fromJSON($data);\\nif (!is_array($data)) return $return;\\n\\n\\/\\/Change the fieldnames\\nif ($fieldNames) {\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        \\/\\/ reverse order from FormItSaveForm snippet\\n        $fieldLabels[trim($label)] = trim($name);\\n    }\\n    foreach ($data as $key => $value) {\\n        if ($fieldLabels[$key]) {\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $data = $newDataArray;\\n}\\n\\n\\/\\/ Always pass back in the provided hash key\\n$data[$formHashKeyField] = $formHashKey;\\n$hook->setValues($data);\\nreturn true;"}',
);