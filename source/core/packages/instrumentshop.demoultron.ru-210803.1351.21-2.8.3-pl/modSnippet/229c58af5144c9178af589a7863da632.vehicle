<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '2ab11e21e95fed07499789e52185a9aa',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '229c58af5144c9178af589a7863da632',
  'native_key' => 11,
  'object' => '{"id":11,"source":0,"property_preprocess":0,"name":"getImageList","description":"","editor_type":0,"category":3,"cache_type":0,"snippet":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\nif ($allow_request) {\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\nif ($allow_request) {\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n}\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n\\n        if (empty($outputvalue)) {\\n            $outputvalue = $tv->renderOutput($docid);\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\n                foreach ($inheritFrom as $from) {\\n                    if ($from == \'parents\') {\\n                        if (!empty($inherit_children_tvname)){\\n                            \\/\\/try to get items from optional MIGX-TV for children\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\n                            }\\n                        }\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\n                    } else {\\n                        $outputvalue = $tv->renderOutput($from);\\n                    }\\n                    if (!empty($outputvalue)) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\n            $migx->source->initialize();\\n        }\\n\\n    }\\n\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    $modx->setPlaceholder($totalVar, 0);\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n$summaries = array();\\n$output = \'\';\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\n$count = count($items);\\n\\nif ($count > 0) {\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $count = count($items);\\n    $tempitems = array();\\n\\n    for ($i = 0; $i < $limit; $i++) {\\n        if ($i >= $count) {\\n            break;\\n        }\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\n                \\/* process any TV commands in value *\\/\\n                $tv_value = $tv->processBindings($value, $docid);\\n                $params = $tv->get(\'output_properties\');\\n                if (empty($params) || $params === null) {\\n                    $params = [];\\n                }\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\n                \\/* find the render *\\/\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\n\\t\\t\\t\\t\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($o) && !empty($wrapperTpl)) {\\n    $template = $migx->getTemplate($wrapperTpl);\\n    if ($template[$wrapperTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$wrapperTpl]);\\n        $properties[\'output\'] = $o;\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (empty($o) && !empty($emptyTpl)) {\\n    $template = $migx->getTemplate($emptyTpl);\\n    if ($template[$emptyTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$emptyTpl]);\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\nif ($allow_request) {\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\nif ($allow_request) {\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n}\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n\\n        if (empty($outputvalue)) {\\n            $outputvalue = $tv->renderOutput($docid);\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\n                foreach ($inheritFrom as $from) {\\n                    if ($from == \'parents\') {\\n                        if (!empty($inherit_children_tvname)){\\n                            \\/\\/try to get items from optional MIGX-TV for children\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\n                            }\\n                        }\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\n                    } else {\\n                        $outputvalue = $tv->renderOutput($from);\\n                    }\\n                    if (!empty($outputvalue)) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\n            $migx->source->initialize();\\n        }\\n\\n    }\\n\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    $modx->setPlaceholder($totalVar, 0);\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n$summaries = array();\\n$output = \'\';\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\n$count = count($items);\\n\\nif ($count > 0) {\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $count = count($items);\\n    $tempitems = array();\\n\\n    for ($i = 0; $i < $limit; $i++) {\\n        if ($i >= $count) {\\n            break;\\n        }\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\n                \\/* process any TV commands in value *\\/\\n                $tv_value = $tv->processBindings($value, $docid);\\n                $params = $tv->get(\'output_properties\');\\n                if (empty($params) || $params === null) {\\n                    $params = [];\\n                }\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\n                \\/* find the render *\\/\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\n\\t\\t\\t\\t\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($o) && !empty($wrapperTpl)) {\\n    $template = $migx->getTemplate($wrapperTpl);\\n    if ($template[$wrapperTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$wrapperTpl]);\\n        $properties[\'output\'] = $o;\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (empty($o) && !empty($emptyTpl)) {\\n    $template = $migx->getTemplate($emptyTpl);\\n    if ($template[$emptyTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$emptyTpl]);\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
);